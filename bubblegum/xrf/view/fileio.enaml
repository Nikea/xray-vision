# ######################################################################
# Copyright (c) 2014, Brookhaven Science Associates, Brookhaven        #
# National Laboratory. All rights reserved.                            #
#                                                                      #
# Redistribution and use in source and binary forms, with or without   #
# modification, are permitted provided that the following conditions   #
# are met:                                                             #
#                                                                      #
# * Redistributions of source code must retain the above copyright     #
#   notice, this list of conditions and the following disclaimer.      #
#                                                                      #
# * Redistributions in binary form must reproduce the above copyright  #
#   notice this list of conditions and the following disclaimer in     #
#   the documentation and/or other materials provided with the         #
#   distribution.                                                      #
#                                                                      #
# * Neither the name of the Brookhaven Science Associates, Brookhaven  #
#   National Laboratory nor the names of its contributors may be used  #
#   to endorse or promote products derived from this software without  #
#   specific prior written permission.                                 #
#                                                                      #
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  #
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT    #
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS    #
# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE       #
# COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,           #
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES   #
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR   #
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)   #
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,  #
# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OTHERWISE) ARISING   #
# IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE   #
# POSSIBILITY OF SUCH DAMAGE.                                          #
########################################################################

__author__ = 'Li Li'

from enaml.widgets.api import (Container, PushButton, Label,
                               Form, Field, FileDialogEx, DockItem,
                               DockArea, CheckBox, ComboBox, ScrollArea)
from enaml.layout.api import hbox, vbox, HSplitLayout, VSplitLayout, spacer, grid
import numpy as np


enamldef FileView(DockItem): file_view:
    attr io_model
    attr param_model
    Container:
        Form:
#            Label: lb_tool_name:
#                text = 'PyXRF: X-ray Fluorescence Analysis Tool'
            #Container:
            #constraints = [
            #    vbox(
            #        hbox(btn_folder, btn_fd),
            #        #hbox(btn_file, fd),
            #        #hbox(load_lbl),
            #        hbox(btn_files, CB),
            #        hbox(files_load),
            #        hbox(pb_load, fd_load),
            #        hbox(param_lbl),
            #    ),
            #    btn_folder.width == btn_files.width,
            #    btn_folder.width == pb_load.width,
            #]
            PushButton: btn_folder:
                text = "Working Directory"
                clicked ::
                    path = FileDialogEx.get_existing_directory(file_view)
                    if path:
                        io_model.working_directory = path
            Field: btn_fd:
                text := io_model.working_directory
            PushButton: btn_file:
                text = "Data File"
                clicked ::
                    path = FileDialogEx.get_open_file_name(file_view, current_path=io_model.working_directory)
                    if path:
                        pathlist = path.split('/')
                        io_model.data_file = pathlist[-1]
                        fd.text = pathlist[-1]
            Field: fd:
                text := io_model.data_file

            PushButton: btn_files:
                text = "Open Files"
                clicked ::
                    path = FileDialogEx.get_open_file_names(file_view, current_path=io_model.working_directory)
                    if path:
                        pathlist = [item.split('/')[-1] for item in path] #path[1].split('/')
                        print('path list: {} '.format(pathlist))
                        io_model.file_names = pathlist
                        files_load.text = 'Number of files loaded: {}'.format(len(io_model.file_names))
                        #io_model.load_more_data()
                        CB.items = ['Please select file'] + io_model.file_names
            Label: files_load:
                text = 'No data is loaded.'
            ComboBox: CB:
                items = ['Please load file first']
                index := io_model.file_opt
                index = 0
            PushButton: pb_load:
                text = 'Parameter File'
                #maximum_size = 200
                clicked ::
                    parameter_file_path = FileDialogEx.get_open_file_name(file_view)
                    if parameter_file_path:
                        fd_load.text = parameter_file_path
                        param_model.parameter_file_path = parameter_file_path
                        param_lbl.text = param_model.param_status
            Field: fd_load:
                text = 'Use default otherwise.'
        Label: load_lbl:
            text << io_model.load_status
        Label: param_lbl:
            text = 'Using default parameter file.'
