# ######################################################################
# Copyright (c) 2014, Brookhaven Science Associates, Brookhaven        #
# National Laboratory. All rights reserved.                            #
#                                                                      #
# Redistribution and use in source and binary forms, with or without   #
# modification, are permitted provided that the following conditions   #
# are met:                                                             #
#                                                                      #
# * Redistributions of source code must retain the above copyright     #
#   notice, this list of conditions and the following disclaimer.      #
#                                                                      #
# * Redistributions in binary form must reproduce the above copyright  #
#   notice this list of conditions and the following disclaimer in     #
#   the documentation and/or other materials provided with the         #
#   distribution.                                                      #
#                                                                      #
# * Neither the name of the Brookhaven Science Associates, Brookhaven  #
#   National Laboratory nor the names of its contributors may be used  #
#   to endorse or promote products derived from this software without  #
#   specific prior written permission.                                 #
#                                                                      #
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  #
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT    #
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS    #
# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE       #
# COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,           #
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES   #
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR   #
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)   #
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,  #
# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OTHERWISE) ARISING   #
# IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE   #
# POSSIBILITY OF SUCH DAMAGE.                                          #
########################################################################

__author__ = 'Li Li'

from enaml.widgets.api import (Container, PushButton, Label,
                               Form, Field, FileDialogEx, DockItem,
                               DockArea, MPLCanvas, CheckBox,
                               ComboBox, Window)
from enaml.layout.api import hbox, vbox, HSplitLayout, VSplitLayout, spacer
from enaml.stdlib.fields import FloatField as DefaultFloatField

import numpy as np

from matplotlib.figure import Figure
from skxray.fitting.xrf_model import (k_line, l_line, m_line)


k_line_full = [item+'_K' for item in k_line]

enamldef FloatField(DefaultFloatField):
    submit_triggers = ['auto_sync']


enamldef PlotMain(DockItem):
    attr io_model
    attr plot_model
    attr param_model
    Container:
        constraints = [
            vbox(
                hbox(cbox1, spacer, pb_eline, cbox2, checkb),
                #hbox(spacer, pb_eline, cbox2, checkb),
                canvas,
            ),
        ]
        #ComboBox: data_choose:
        #    items = ['file1', 'file2']
        ComboBox: cbox1:
            items = ['LinLog', 'Linear']
            index >> plot_model.scale_opt
            index = 0
        PushButton: pb_eline:
            text = 'Set energy'
            tool_tip = 'Set up energy to calculate emission lines.'
            enabled = True
            clicked ::
                AdjustEmissionLine.plot_m = plot_model
                AdjustEmissionLine().show()
        ComboBox: cbox2:
            items = ['Display emission lines'] +\
                    k_line_full + l_line + m_line
            index := plot_model.element_id
            index = 0
        #PushButton: pbn:
        #    text = 'Plot Experiment Data'
        #    checkable = True
        #    clicked ::
        #        if checked:
        #            #plot_model.plot_title = io_model.file_name
        #            #plot_model.data = io_model.data
        #            plot_model.parameters = param_model.parameters
        #            plot_model.incident_energy = param_model.parameters['coherent_sct_energy'].value
        #            plot_model.plot_experiment()
        #            plot_model.plot_exp_opt = True
        #        else:
        #            plot_model.plot_exp_opt = False
        CheckBox: checkb:
            text = 'Toolbar Visible'
            checked := canvas.toolbar_visible
        MPLCanvas: canvas:
            figure << plot_model._fig
            #figures[cbox.selected_item]


enamldef AdjustEmissionLine(Window):
    attr plot_m
    title = ' '
    Container:
        constraints = [
            hbox(elbl, fd),
        ]
        Label: elbl:
            text = 'Energy'
        FloatField: fd:
            value := plot_m.incident_energy
