# ######################################################################
# Copyright (c) 2014, Brookhaven Science Associates, Brookhaven        #
# National Laboratory. All rights reserved.                            #
#                                                                      #
# Redistribution and use in source and binary forms, with or without   #
# modification, are permitted provided that the following conditions   #
# are met:                                                             #
#                                                                      #
# * Redistributions of source code must retain the above copyright     #
#   notice, this list of conditions and the following disclaimer.      #
#                                                                      #
# * Redistributions in binary form must reproduce the above copyright  #
#   notice this list of conditions and the following disclaimer in     #
#   the documentation and/or other materials provided with the         #
#   distribution.                                                      #
#                                                                      #
# * Neither the name of the Brookhaven Science Associates, Brookhaven  #
#   National Laboratory nor the names of its contributors may be used  #
#   to endorse or promote products derived from this software without  #
#   specific prior written permission.                                 #
#                                                                      #
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  #
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT    #
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS    #
# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE       #
# COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,           #
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES   #
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR   #
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)   #
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,  #
# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OTHERWISE) ARISING   #
# IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE   #
# POSSIBILITY OF SUCH DAMAGE.                                          #
########################################################################

__author__ = 'Li Li'

from enaml.widgets.api import (Container, PushButton, Label,
                               Form, Field, FileDialogEx, DockItem,
                               DockArea, CheckBox, ComboBox, PopupView,
                               SpinBox, ScrollArea, Window, GroupBox, RadioButton)
from enaml.layout.api import (hbox, vbox, HSplitLayout, VSplitLayout,
                              spacer, grid)
from enaml.core.api import Include, Looper
from enaml.stdlib.fields import FloatField as DefaultFloatField
from enaml.layout.geometry import Box
from auto_enaml.api import AutoView
from enaml.stdlib.message_box import MessageBox, warning, information

import numpy as np
import six

from ..model.guessparam import format_dict
from skxray.fitting.xrf_model import (k_line, l_line, m_line)

k_line_full = [item+'_K' for item in k_line]


enamldef FloatField(DefaultFloatField):
    submit_triggers = ['auto_sync'] #['return_pressed']


enamldef GuessParamView(DockItem): param_view:
    attr param_model
    attr io_model
    attr plot_model
    attr fit_model

    Container:
        constraints = [
            vbox(
                hbox(CB, plot_btn, spacer),
                hbox(new_param_load, spacer),
                top_cntr,
                hbox(find_btn, spacer),
                hbox(cb_select, intensity_lb, intensity_fd, manual_add, spacer),
                pre_fit,
                hbox(saveas_btn, spacer),
            ),
        ]

        ComboBox: CB:
            items << ['Select Data for fitting.'] + io_model.file_names
            index = 0
            index >> param_model.file_opt
            index ::
                #plot_model.data = param_model.data
                #fit_model.data = param_model.data
                if CB.index > 0:
                    fit_model.data_title = io_model.file_names[CB.index-1].split('.')[0]
                    plot_model.exp_data_label = fit_model.data_title
                    plot_model.data = param_model.data
                    fit_model.data = param_model.data
                    fit_model.data_all = param_model.data_all

        PushButton: plot_btn:
            text = 'Plot Data'
            checkable = True
            clicked ::
                if checked:
                    plot_model.plot_experiment()
                    plot_model.plot_exp_opt = True
                else:
                    plot_model.plot_exp_opt = False

        PushButton: new_param_load:
                text = 'Import Parameters from File'
                #maximum_size = 200
                clicked ::
                    parameter_file_path = FileDialogEx.get_open_file_name(param_view)
                    if parameter_file_path:
                        param_model.get_new_param(parameter_file_path)
                        param_model.EC.order()

                        fit_model.get_new_param(param_model.param_new)
                        #fit_model.param_dict = param_model.param_new

                        param_model.update_name_list()
                        plot_model.parameters = param_model.parameters
                        param_model.data_for_plot()
                        plot_model.set_prefit_data(param_model.prefit_x, param_model.total_y,
                                                   param_model.total_y_l, param_model.total_y_m)
                        plot_model._fig.canvas.draw()

        ScrollArea: top_cntr:
            constraints = [height <= 100]
            Form:
                row_spacing = -1
                Looper: looper:
                    iterable << sorted([v for k,v in six.iteritems(param_model.parameters) if len(v.description)!=0],
                                       key=lambda x: x.description)
                    Label:
                        #text = param_model.parameters[loop_item].description
                        #tool_tip = param_model.parameters[loop_item].tool_tip
                        text = loop_item.description
                        tool_tip = loop_item.tool_tip
                        maximum_size = 140
                    Container:
                        padding = Box(2, 2, 2, 2)
                        constraints = [hbox(ff, pb)]
                        FloatField: ff:
                            #enabled = False
                            #minimum := param_model.parameters[loop_item].min
                            #maximum := param_model.parameters[loop_item].max
                            #value := param_model.parameters[loop_item].value
                            value := loop_item.value
                            maximum_size = 200
                        PushButton: pb:
                            text = 'Default'
                            maximum_size = 100
                            clicked ::
                                ff.value = loop_item.default_value

        PushButton: find_btn:
            text = 'Automatic Peak Finding'
            enabled = True
            #status_tip = 'Not Running.'
            clicked ::
                param_model.EC.delete_all()
                param_model.find_peak()
                param_model.EC.order()
                param_model.update_name_list()
                param_model.data_for_plot()
                status_tip = 'Running'
                plot_model.set_prefit_data(param_model.prefit_x, param_model.total_y,
                                           param_model.total_y_l, param_model.total_y_m)

        #Label: add_lbl:
        #    text = 'Manual Peak Adding: '

        ComboBox: cb_select:
            items = ['Select Lines'] +\
                    k_line_full + l_line + m_line
            index = 0
            index ::
                if cb_select.index > 0:
                    param_model.e_name = cb_select.selected_item

        Label: intensity_lb:
            text = 'Peak Int'
        FloatField: intensity_fd:
            value := param_model.e_intensity
            submit_triggers = ['auto_sync']
            maximum_size = 60

        PushButton: manual_add:
            text = 'Add'
            clicked ::
                param_model.manual_input()
                param_model.update_name_list()
                param_model.data_for_plot()
                plot_model.set_prefit_data(param_model.prefit_x, param_model.total_y,
                                           param_model.total_y_l, param_model.total_y_m)
                plot_model._fig.canvas.draw()

            #PushButton: overlap_btn:
            #    text = 'Remove Plot'
            #    minimum_size = (150, 20)
            #    enabled = True
            #    checkable = True
            #    clicked ::
            #        if len(param_model.total_y) == 0:
            #            warning(self, 'Warning Dialog', 'Nothing to plot. Please make sure to run \'Find Peaks\' first')
            #        else:
            #            if checked:
            #                overlap_btn.text = 'Remove Plot'
            #                plot_model.show_autofit_opt = True
            #            else:
            #                overlap_btn.text = 'Overlap to Spectrum'
            #                plot_model.show_autofit_opt = False

        GroupBox: pre_fit:
            padding = Box(2, 2, 2, 2)
            constraints = [vbox(scr_area_title,
                                #hbox(manual_add),
                                scr_area,
                                #hbox(pb_clear, spacer),
                                hbox(pb_update, spacer),),]
            Container: scr_area_title:
                padding = Box(2, 2, 2, 2)
                constraints = [vbox(
                                   hbox(del_lb, z, name, energy, inten, norm, select_all, spacer),
                                   )
                               ]
                Label: del_lb:
                    text = '{:>10}'.format(' ')
                    minimum_size = (30, 20)
                PushButton: z:
                    text = 'Z'
                    minimum_size = (30, 20)
                    #background = 'white'
                    clicked ::
                        param_model.EC.order(option='z')
                        param_model.update_name_list()
                PushButton: name:
                    text = 'Names'
                    minimum_size = (40, 20)
                    maximum_size = 70
                    #background = 'white'
                    clicked ::
                        param_model.EC.order(option='name')
                        param_model.update_name_list()
                PushButton: energy:
                    text = 'Energy'
                    maximum_size = 70
                    #background = 'white'
                    clicked ::
                        param_model.EC.order(option='energy')
                        param_model.update_name_list()
                PushButton: inten:
                    text = 'Peak Int'
                    minimum_size = (90, 20)
                    #background = 'white'
                    clicked ::
                        param_model.EC.order(option='maxv')
                        param_model.update_name_list()
                Label: norm:
                    text = 'Rel Int(%)'
                    minimum_size = (80, 20)
                    #background = 'white'
                    align = 'center'
                PushButton: select_all:
                    text = 'Show All'
                    #maximum_size = 30
                    minimum_size = (30, 20)
                    checkable = True
                    clicked ::
                        if checked:
                            param_model.EC.turn_on_all()
                            param_model.data_for_plot()
                            plot_model.set_prefit_data(param_model.prefit_x, param_model.total_y,
                                                       param_model.total_y_l, param_model.total_y_m)
                            plot_model.show_autofit_opt = True
                            plot_model._fig.canvas.draw()
                            select_all.text = 'Hide All'
                        else:
                            param_model.EC.turn_on_all(option=False)
                            param_model.data_for_plot()
                            plot_model.set_prefit_data(param_model.prefit_x, param_model.total_y,
                                                       param_model.total_y_l, param_model.total_y_m)
                            plot_model.show_autofit_opt = False
                            plot_model._fig.canvas.draw()
                            select_all.text = 'Show All'

            #GroupBox: manual_add:
                #padding = Box(5, 5, 5, 5)
                #constraints = [hbox(element_lb, element_fd, intensity_lb, intensity_fd, manual_add, spacer)]
                #RadioButton: manual_rb:
                #    text = 'Manual'
                #    #checkable = True
                #    checked = True
                #    toggled ::
                #        if checked:
                #            element_lb.enabled = True
                #            element_fd.enabled = True
                #            manual_add.enabled = True
                #            find_btn.enabled = False
                #            overlap_btn.enabled = False
                #        else:
                #            element_lb.enabled = False
                #            element_fd.enabled = False
                #            manual_add.enabled = False
                #            find_btn.enabled = True
                #            overlap_btn.enabled = True

            ScrollArea: scr_area:
                constraints = [height <= 200]

                Form:
                #Container: ctn_looper:
                    row_spacing = -1
                    #padding = Box(0, 0, 0, 0)
                    Looper: looper:
                        iterable << list(param_model.result_dict_names)

                        PushButton: delete_btn:
                            text = 'Del'
                            clicked ::
                                param_model.EC.delete_item(loop_item)
                                param_model.EC.update_peak_ratio()
                                param_model.data_for_plot()

                                #param_model.create_full_param()

                                #fit_model.param_dict = param_model.param_new
                                #fit_model.get_new_param(param_model.param_new)
                                plot_model.set_prefit_data(param_model.prefit_x, param_model.total_y,
                                                           param_model.total_y_l, param_model.total_y_m)
                                plot_model._fig.canvas.draw()
                                param_model.update_name_list()

                        Container:
                            padding = Box(2, 2, 2, 2)
                            constraints = [hbox(delete_btn, lb_z, lb_name, lb_energy, lb_inten,
                                                lb_norm, select_cb, spacer),
                                                lb_norm.height==select_cb.height]

                            Label: lb_z:
                                text << param_model.EC.element_dict[loop_item].z
                                minimum_size = (40, 20)
                                #background = 'white'
                            Label: lb_name:
                                text << loop_item[0:5]
                                minimum_size = (56, 20)
                                #background = 'white'
                            Label: lb_energy:
                                text << str(param_model.EC.element_dict[loop_item].energy)
                                minimum_size = (50, 20)
                                #maximum_size = 80
                                #background = 'white'
                            FloatField: lb_inten:
                                value := param_model.EC.element_dict[loop_item].maxv
                                minimum_size = (60, 20)
                                maximum_size = 80
                                background = 'white'
                                #align = 'right'
                                minimum = 0.0

                            Label: lb_norm:
                                text << set_low_bound(np.around(param_model.EC.element_dict[loop_item].norm, 2))
                                minimum_size = (100, 20)
                                #background = 'white'
                                align = 'center'

                            CheckBox: select_cb:
                                checkable = True
                                minimum_size = (30, 20)
                                checked := param_model.EC.element_dict[loop_item].status
                                clicked ::
                                    param_model.EC.element_dict[loop_item].status = checked
                                    param_model.EC.element_dict[loop_item].stat_copy = param_model.EC.element_dict[loop_item].status
                                    param_model.data_for_plot()
                                    plot_model.set_prefit_data(param_model.prefit_x, param_model.total_y,
                                                               param_model.total_y_l, param_model.total_y_m)
                                    plot_model._fig.canvas.draw()

            #PushButton: pb_bound:
            #    text = 'Do not plot lines < 0.1%'
            #    maximum_size = 350
            #    visible = True
            #    checkable = True
            #    clicked ::
            #        if checked:
            #            for k,v in six.iteritems(param_model.EC.element_dict):
            #                v.status = v.lbd_stat
            #            param_model.data_for_plot()
            #            plot_model.set_prefit_data(param_model.prefit_x, param_model.total_y, param_model.total_y_l)
            #            plot_model._fig.canvas.draw()
            #            pb_bound.text = 'Plot lines < 0.1%'
            #        else:
            #            for k,v in six.iteritems(param_model.EC.element_dict):
            #                v.status = v.stat_copy
            #            param_model.data_for_plot()
            #            plot_model.set_prefit_data(param_model.prefit_x, param_model.total_y,
            #                                       param_model.total_y_l, param_model.total_y_m)
            #            plot_model._fig.canvas.draw()
            #            pb_bound.text = 'Do not plot lines < 0.1%'

            #PushButton: pb_clear:
            #    text = 'Delete All'
            #    clicked ::
            #        param_model.EC.delete_all()
            #        param_model.update_name_list()

            #        param_model.data_for_plot()
            #        plot_model.set_prefit_data(param_model.prefit_x, param_model.total_y,
            #                                   param_model.total_y_l, param_model.total_y_m)
            #        plot_model._fig.canvas.draw()

            PushButton: pb_update:
                text = 'Apply'
                clicked ::

                    param_model.update_name_list()
                    param_model.EC.update_peak_ratio()
                    param_model.data_for_plot()
                    param_model.create_full_param()

                    #fit_model.param_dict = param_model.param_new
                    fit_model.get_new_param(param_model.param_new)

                    plot_model.set_prefit_data(param_model.prefit_x, param_model.total_y,
                                               param_model.total_y_l, param_model.total_y_m)
                    plot_model._fig.canvas.draw()

        #PushButton: save_btn:
        #    text = 'Save'
        #    clicked ::
        #        param_model.create_full_param()
        #        param_model.save()
        #        fit_model.param_dict = param_model.param_new
        PushButton: saveas_btn:
            text = 'Save As'
            clicked ::
                path = FileDialogEx.get_save_file_name(param_view,
                                                       current_path=io_model.working_directory)
                if path:
                    #param_model.create_full_param()
                    #fit_model.param_dict = param_model.param_new
                    param_model.file_path = path
                    param_model.save_as()


def set_low_bound(value, thresh_v=0.1):
    """
    Return values only above given threshold.

    Parameters
    ----------
    value : float
    thresh_v : float, opt
        threshold value
    """
    if value <= thresh_v:
        return '< {}'.format(thresh_v)
    else:
        return str(value)
